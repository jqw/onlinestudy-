# _*_encoding:utf-8_*_
"""
Django settings for onlinestudy project.

Generated by 'django-admin startproject' using Django 1.8.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import sys  # 设置python的相关路径

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))  # 自己配置app路
sys.path.insert(0, os.path.join(BASE_DIR, 'extra_apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'a55o$i3j-%$qb((-9s@a#y1y1i_0qo49$#nfy-rtpuabibyg54'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []
# 设置自己用户验证的方法
AUTHENTICATION_BACKENDS = (
    'studyuser.views.CustomBackend',
)

# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'studyuser',
    'courseapp',
    'organization',
    'operation',
    # xadmin
    'xadmin',
    'crispy_forms',
    # 验证码
    'captcha',
)
# 扩展了django中的数据用户表
AUTH_USER_MODEL = 'studyuser.UserInfo'

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'onlinestudy.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'onlinestudy.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'online',
        'USER': 'root',
        'PASSWORD': 'mysql',
        'PORT': '3306',
        'HOST': 'localhost',
    }
}

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True
# django数据库改成本地时间存储
USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'
# 静态文件路径
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]
# 配置上传图片的路径
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# 邮箱的发送路径,163邮箱的服务器地址
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.163.com'
EMAIL_PORT = 25
EMAIL_HOST_USER = 'cxl520ww@163.com'
EMAIL_HOST_PASSWORD = 'python88'
EMAIL_USE_TIL = False
EMAIL_FROM = 'cxl520ww@163.com'
# USER和from保持一致

# 记录日志
# LOGGING = {
#     'version': 1,  # 指明dictConnfig的版本，目前就只有一个版本，哈哈
#     'disable_existing_loggers': True,  # 禁用所有的已经存在的日志配置
#     'formatters': {  # 格式器
#         'verbose': {  # 详细
#             'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
#         },
#         'simple': {  # 简单
#             'format': '%(levelname)s %(message)s'
#         },
#     },
#     'filters': {  # 过滤器
#         'special': {  # 使用project.logging.SpecialFilter，别名special，可以接受其他的参数
#             '()': 'project.logging.SpecialFilter',
#             'foo': 'bar',  # 参数，名为foo，值为bar
#         }
#     },
#     'handlers': {  # 处理器，在这里定义了三个处理器
#         'null': {  # Null处理器，所有高于（包括）debug的消息会被传到/dev/null
#             'level': 'DEBUG',
#             'class': 'django.utils.log.NullHandler',
#         },
#         'console': {  # 流处理器，所有的高于（包括）debug的消息会被传到stderr，使用的是simple格式器
#             'level': 'DEBUG',
#             'class': 'logging.StreamHandler',
#             'formatter': 'simple'
#         },
#         'mail_admins': {  # AdminEmail处理器，所有高于（包括）而error的消息会被发送给站点管理员，使用的是special格式器
#             'level': 'ERROR',
#             'class': 'django.utils.log.AdminEmailHandler',
#             'filters': ['special']
#         }
#     },
#     'loggers': {  # 定义了三个记录器
#         'django': {  # 使用null处理器，所有高于（包括）info的消息会被发往null处理器，向父层次传递信息
#             'handlers': ['null'],
#             'propagate': True,
#             'level': 'INFO',
#         },
#         'django.request': {  # 所有高于（包括）error的消息会被发往mail_admins处理器，消息不向父层次发送
#             'handlers': ['mail_admins'],
#             'level': 'ERROR',
#             'propagate': False,
#         },
#         'myproject.custom': {  # 所有高于（包括）info的消息同时会被发往console和mail_admins处理器，使用special过滤器
#             'handlers': ['console', 'mail_admins'],
#             'level': 'INFO',
#             'filters': ['special']
#         }
#     }
# }
